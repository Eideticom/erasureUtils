#! /bin/bash

#Copyright (c) 2015, Los Alamos National Security, LLC
#All rights reserved.
#
#Copyright 2015.  Los Alamos National Security, LLC. This software was produced
#under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
#Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
#the U.S. Department of Energy. The U.S. Government has rights to use, reproduce,
#and distribute this software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL
#SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY
#FOR THE USE OF THIS SOFTWARE.  If software is modified to produce derivative
#works, such modified software should be clearly marked, so as not to confuse it
#with the version available from LANL.
# 
#Additionally, redistribution and use in source and binary forms, with or without
#modification, are permitted provided that the following conditions are met:
#1. Redistributions of source code must retain the above copyright notice, this
#list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright notice,
#this list of conditions and the following disclaimer in the documentation
#and/or other materials provided with the distribution.
#3. Neither the name of Los Alamos National Security, LLC, Los Alamos National
#Laboratory, LANL, the U.S. Government, nor the names of its contributors may be
#used to endorse or promote products derived from this software without specific
#prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
#"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
#CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
#OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#-----
#NOTE:
#-----
#Although these files reside in a seperate repository, they fall under the MarFS copyright and license.
#
#MarFS is released under the BSD license.
#
#MarFS was reviewed and released by LANL under Los Alamos Computer Code identifier:
#LA-CC-15-039.
#
#These erasure utilites make use of the Intel Intelligent Storage Acceleration Library (Intel ISA-L), which can be found at https://github.com/01org/isa-l and is under its own license.
#
#MarFS uses libaws4c for Amazon S3 object communication. The original version
#is at https://aws.amazon.com/code/Amazon-S3/2601 and under the LGPL license.
#LANL added functionality to the original work. The original work plus
#LANL contributions is found at https://github.com/jti-lanl/aws4c.
#
#GNU licenses can be found at http://www.gnu.org/licenses/.

ITER=2 # Number of N+E file arrays to generate
INITER=2 # (Must be 1 until regeneration is added to lib!!!)Number of error patterns to test for each file array
POSTSLEEP=0 # Number of seconds the program should sleep after a test
TLOGPREF="log_time."    # Prefix for execution time logfiles
LOGFILE=log_errTests.$$ # Name of the test logfile
LIBTLOG=log_libTests.$$ # Name of the libTest output logfile

re='^[0-9]+$'

echo
echo "Tests erasure library functions..."
echo

if [[ ! -e libTest ]]; then
   echo "erasureTest: error: could not locate executable \"libTest\", please run this script from within the \"erasureLib\" directory!"
   exit 1
fi

./libTest crc-status
ICRC=$?
if [[ $ICRC -eq 0 ]]; then
   echo "INTERMEDIATE CRCS - ACTIVE"
else
   echo "INTERMEDIATE CRCS - INACTIVE"
fi

command -v bc >/dev/null 2>&1
BC=$?

if [[ $BC -ne 0 ]]; then
   echo "Note: command 'bc' could not be found.  Times will be displayed as ranges and averages will be skipped!"
fi

echo "Generating input file 'testfile.$$' (this will take some time)..."
dd if=/dev/urandom of=testfile.$$ bs=10M count=20
echo "done"
echo

echo "Created testfile.$$" >> $LOGFILE
echo >> $LOGFILE

cnt=0
while [[ $cnt -lt $ITER ]]; do
   n=$RANDOM
   let "n %= 13"
   n=$(( n + 2 ))
   e=$RANDOM
   let "e %= 3"
   e=$(( e + 1 ))
   start=$RANDOM
   let "start %= $(( n + e ))"

   err_free=0

   echo
   echo "Generating $n+$e striping starting at file $start..."
   echo >> $LOGFILE
   echo >> $LIBTLOG
   echo "Generating $n+$e striping starting at file $start""..." >> $LOGFILE
   tcnt=$( date +%s%N )

   ret=$( ./libTest write testfile.$$ testout.%d.$$ $n $e $start 209715200 2>&1 | tee -a $LIBTLOG | tail -n 1 )

   tcnt="`date +%s%N` - $tcnt"
   if [[ $BC -eq 0 ]]; then
      tcnt=$( echo "$tcnt" | bc )
   fi

   if [[ ! $ret =~ $re  ||  $ret -ne 0 ]]; then
      echo -e "\033[0;31mFAIL - write operation returned an unexpected status"
      echo -e "CMD = ./libTest write testfile.$$ testout.%d.$$ $n $e $start 209715200\033[0m"
      echo "   FAILURE: wite operation returned a non-sero status" >> $LOGFILE
      echo "CMD = ./libTest write testfile.$$ testout.%d.$$ $n $e $start 209715200" >> $LOGFILE
      exit -1
   fi
   echo "...done.  Elapsed time = $tcnt""."
   echo "   stripe generation complete" >> $LOGFILE
   echo "$tcnt" >> $TLOGPREF$$.write
   echo
   ls testout.*.$$
   echo

   incnt=0
   while [[ $incnt -lt $INITER ]]; do

   if [[ $incnt -ne 0 ]]; then
      echo "Continuing with the same $n+$e striping..."
      echo >> $LOGFILE
      echo "Continuring to use $n+$e striping with start $start..." >> $LOGFILE
      echo
   fi

   nerr=$RANDOM
   let "nerr %= $(( e + 1 ))"

   if [[ $nerr -eq 0 ]]; then
      if [[ $err_free -eq 1 ]]; then
         nerr=$e
      fi
      err_free=1
   fi

   npat=""
   maxpos=$(( n + e - nerr + 1 ))
   oldpos=0
   errcnt=0
   errpos=-1
   readerr=0
   silent_count=0

   echo "$nerr error(s) are to be inserted..."
   echo "Inserting $nerr error(s)..." >> $LOGFILE
   
   {

      stat=0

      while [[ $errcnt -lt $nerr ]]; do
         while [[ $errpos -lt $oldpos ]]; do
            errpos=$RANDOM
            let "errpos %= maxpos"
         done

         echo "   placing error at $errpos""..."
         echo "   placing error at $errpos""..." >> $LOGFILE
         stat=$(( stat + 2**errpos ))

         efile="testout.$errpos.$$"
         truepos=$(( errpos - start ))
         if [[ $truepos -lt 0 ]]; then
            truepos=$(( truepos + n + e ))
         fi
            
         if [[ $truepos -lt $n ]]; then
            readerr=1
         fi

         ctype=$(( RANDOM % (3-ICRC) ))
         if [[ $ctype -eq 0 ]]; then
            echo "   corrupting file $efile ( corruption-type : removal )"
            echo "   corrupting file $efile ( corruption-type : removal )" >> $LOGFILE
            rm $efile
         elif [[ $ctype -eq 1 ]]; then
            err_list[$silent_count]=$errpos
            silent_count=$(( silent_count + 1 ))
            echo "   corrupting file $efile ( corruption-type : truncate )"
            echo "   corrupting file $efile ( corruption-type : truncate )" >> $LOGFILE
            fsize=$( stat -c%s $efile )
            corr=$(( RANDOM % fsize ))
            echo "      truncating from $fsize to $corr bytes"
            truncate -s $corr $efile
         else
            err_list[$silent_count]=$errpos
            silent_count=$(( silent_count + 1 ))
            echo "   corrupting file $efile ( corruption-type : silent )"
            echo "   corrupting file $efile ( corruption-type : silent )" >> $LOGFILE
            fsize=$( stat -c%s $efile )
            corr=$(( RANDOM % fsize ))
            offset=$(( RANDOM % ( fsize - corr ) ))
            echo "      inserting $corr random bytes at offset $offset"
            echo "      inserting $corr random bytes at offset $offset" >> $LOGFILE

            cp $efile $efile".tmp"
            diff=0
            while [[ $diff -eq 0 ]]; do
               dd if=/dev/urandom of=$efile bs=1 count=$corr seek=$offset conv=notrunc > /dev/null 2>&1
               diff $efile $efile".tmp" > /dev/null 2>&1
               diff=$?
               if [[ $diff -eq 0 ]]; then
                  echo "      corrption insertion did not alter file, retrying..."
               fi
            done
            rm $efile".tmp"
         fi

         while [[ $oldpos -lt $errpos ]]; do
            if [[ $npat == "" ]]; then
               npat="0"
            else
               npat="$npat"".0"
            fi
            oldpos=$(( oldpos + 1 ))
         done

         if [[ $npat == "" ]]; then
            npat="1"
         else
            npat="$npat"".1"
         fi #here
         echo "   error creation successful"
         echo "   error creation successful" >> $LOGFILE
         oldpos=$(( oldpos + 1 ))
         
         errcnt=$(( errcnt + 1 ))
         maxpos=$(( maxpos + 1 ))
      done

      maxpos=$(( maxpos - 1 ))

      while [[ $oldpos -lt $maxpos ]]; do
         if [[ $npat == "" ]]; then
            npat="0"
         else
            npat="$npat"".0"
         fi
         oldpos=$(( oldpos + 1 ))
      done

      echo "...errors inserted."
      echo "Error pattern is  $npat"
      echo "Errors inserted, pattern is  $npat" >> $LOGFILE
      echo

      tstat=$stat
      tmp=0
      while [[ $readerr -eq 0  &&  $tmp -lt $silent_count ]]; do
         errpos=${err_list[$tmp]}
         truepos=$(( errpos - start ))
         if [[ $truepos -lt 0 ]]; then
            truepos=$(( truepos + n + e ))
         fi

         if [[ ! $truepos -lt $n ]]; then
            tstat=$(( tstat - (2**errpos) ))
         fi

         tmp=$(( tmp + 1 ))
      done

      echo >> $LIBTLOG
      echo "Performing a read of all data from striping (expected return value = $tstat)..."
      echo "Performing read of all data from striping (expected return value = $tstat)..." >> $LOGFILE
      tcnt=$( date +%s%N )
      
      ret=$( ./libTest read outfile.$$ testout.%d.$$ $n $e $start 209715200 2>&1 | tee -a $LIBTLOG | tail -n 1 )
      
      tcnt="`date +%s%N` - $tcnt"
      if [[ $BC -eq 0 ]]; then
         tcnt=$( echo "$tcnt" | bc )
      fi

      if [[ ! $ret =~ $re  ||  $ret -ne $tstat ]]; then
         echo -e "\033[0;31mFAIL - read operation returned an inappropriate status, expected $tstat but recieved $ret"
         echo -e "CMD = ./libTest read outfile.$$ testout.%d.$$ $n $e $start 209715200\033[0m"
         echo "   FAILURE: read operation returned an inappropriate status, expected $tstat but recieved $ret" >> $LOGFILE
         echo "CMD = ./libTest read outfile.$$ testout.%d.$$ $n $e $start 209715200" >> $LOGFILE
         exit -1
      fi
      echo "...done.  Elapsed time = $tcnt"". Output file is \"outfile.$$\""
      echo "...done.  Elapsed time = $tcnt"". Output file is \"outfile.$$\"" >> $LOGFILE
      echo "$tcnt" >> $TLOGPREF$$.read
      echo

      #sleep 1
      
      echo "Performing comparison..."
      echo "Performing comparison..." >> $LOGFILE
      #sleep 1
      cmp testfile.$$ outfile.$$

      if [[ $? -ne 0 ]]; then
         echo -e "\033[0;31mFAIL - output does not match expected data"
         echo -e "        compared testfile.$$ and outfile.$$"
         echo -e "CMD = ./libTest read outfile.$$ testout.%d.$$ $n $e $start 209715200\033[0m"
         echo "   FAILURE: output of ne_read does not match the expected data" >> $LOGFILE
         echo "            compared testfile.$$ and outfile.$$" >> $LOGFILE
         echo "CMD = ./libTest read outfile.$$ testout.%d.$$ $n $e $start 209715200" >> $LOGFILE
         exit -1
      fi
      echo "Comparison passed"
      echo "Comparison passed" >> $LOGFILE
   
      echo "Cleaining up outputs..."
      echo "Cleaining up outputs..." >> $LOGFILE
      rm outfile.$$
      echo

      if [[ $npat == *"1"* ]]; then
         echo >> $LIBTLOG
         echo "Attempting error recovery..."
         echo "Attempting error recovery..." >> $LOGFILE
         tcnt=$( date +%s%N )
         
         ret=$( ./libTest rebuild testout.%d.$$ $n $e $start 2>&1 | tee -a $LIBTLOG | tail -n 1 )

         tcnt="`date +%s%N` - $tcnt"
         if [[ $BC -eq 0 ]]; then
            tcnt=$( echo "$tcnt" | bc )
         fi

         if [[ ! $ret =~ $re  ||  $ret -ne $stat ]]; then
            echo -e "\033[0;31mFAIL - ne_rebuild has failed, expected return of $stat but recieved $ret"
            echo -e "CMD = ./libTest rebuild testout.%d.$$ $n $e $start\033[0m"
            echo "   FAILURE: an error occured within ne_rebuild, expected return of $stat but recieved $ret" >> $LOGFILE
            echo "CMD = "./libTest rebuild testout.%d.$$ $n $e $start >> $LOGFILE
            exit $ret
         fi
#         ./libTest write testfile.$$ testout.%d.$$ $n $e $start 209715200 > /dev/null 2>&1
         echo "...recovery complete.  Elapsed time = $tcnt""."
         echo "...recovery complete.  Elapsed time = $tcnt""." >> $LOGFILE
         echo "$tcnt" >> $TLOGPREF$$.recovery
      fi

      echo "Checking the striping for corruption..."
      echo "Checking the striping for corruption..." >> $LOGFILE
      tcnt=$( date +%s%N )

      ret=$( ./libTest status testout.%d.$$ $n $e $start 2>&1 | tail -n 1 )

      tcnt="`date +%s%N` - $tcnt"
      if [[ $BC -eq 0 ]]; then
         tcnt=$( echo "$tcnt" | bc )
      fi

      if [[ ! $ret =~ $re  ||  $ret -ne 0 ]]; then
         echo -e "\033[0;31mFAIL - status check indicates corruption present in erasure striping"
         echo -e "CMD = ./libTest status testout.%d.$$ $n $e $start\033[0m"
         echo "FAIL - status check indicates corruption present in erasure striping" >> $LOGFILE
         echo "CMD = ./libTest status testout.%d.$$ $n $e $start" >> $LOGFILE
         exit $ret
      fi
      echo "...no corruption found.  Elapsed time = $tcnt""."
      echo "...no corruption found.  Elapsed time = $tcnt""." >> $LOGFILE
      echo "$tcnt" >> $TLOGPREF$$.status
      echo

      #All tests passed for this iteration
      echo -e "\033[0;32mPASS - $n+$e with start position $start"
      echo -e "       and error pattern   $npat"
      echo -e "       ( Test $(( (cnt*INITER) + incnt + 1 )) )\033[0m"

      echo "PASS - $n+$e with start position $start" >> $LOGFILE 
      echo "       and error pattern   $npat" >> $LOGFILE
      echo "       ( Test $(( (cnt + 1) * (incnt + 1) )) )" >> $LOGFILE
   }

   sleep $POSTSLEEP

   echo "Removing libTest log file..."
   rm $LIBTLOG

   incnt=$(( incnt + 1 ))
   done

   echo "Cleaining up file array..."
   rm testout.*.$$

   cnt=$(( cnt + 1 ))
done

echo "...done"
echo

if [[ $BC -eq 0 ]]; then
   output=""
   echo "Generating average times..."
   tcnt="( 0.0"
   count=0

   while read -r line; do
      tcnt="$tcnt + $line"
      count=$(( count + 1 ));
   done < "$TLOGPREF$$.write"
   tcnt=$( echo "$tcnt ) / $count" | bc )
   
   output="$output\nWrites:,Performed = $count,AvgTime = $tcnt Nanoseconds"
   tcnt="( 0.0"
   count=0

   while read -r line; do
      tcnt="$tcnt + $line"
      count=$(( count + 1 ));
   done < "$TLOGPREF$$.read"
   tcnt=$( echo "$tcnt ) / $count" | bc )
   
   output="$output\nReads:,Performed = $count,AvgTime = $tcnt Nanoseconds"
   tcnt="( 0.0"
   count=0

   while read -r line; do
      tcnt="$tcnt + $line"
      count=$(( count + 1 ));
   done < "$TLOGPREF$$.recovery"
   tcnt=$( echo "$tcnt ) / $count" | bc )
   
   output="$output\nRecoveries:,Performed = $count,AvgTime = $tcnt Nanoseconds"
   tcnt="( 0.0"
   count=0

   while read -r line; do
      tcnt="$tcnt + $line"
      count=$(( count + 1 ));
   done < "$TLOGPREF$$.status"
   tcnt=$( echo "$tcnt ) / $count" | bc )
   
   output="$output\nStatus:,Performed = $count,AvgTime = $tcnt Nanoseconds"

   printf "$output\n" | column -s "," -o "   " -t
   echo
fi

echo "Cleaning up remaining files..."
rm testfile.$$
echo "Removing log files..."
rm $LOGFILE
rm $TLOGPREF$$.*
echo "...done"


